Day6:
Consumer group monitoring of Kafka clients
Springboot kafka
Kafka Streams
Kafka TOpic Advanced Administration



Consumer group monitoring of Kafka clients

kafka-consumer-groups.sh --bootstrap-server kafka1:9092 --all-groups --describe
kafka-consumer-groups.sh --bootstrap-server kafka1:9092 --all-groups --list


Scenario1:
4 Partitions, 2 consumers, Lag keeps increasing
	-> Consumers are not able to keep up pace with the new messages received
	-> Fix => Add 2 more consumers

Scenario2:
4 Partitions, 4 consumers, Lag keeps increasing
	-> Consumers are not able to keep up pace with the new messages received
	-> Fix => 2 step solution
		i) First increase the number partitions in the topic to 8
		ii) Increase the number of consumers to 8
		
Spring Kafka: Spring Producer, Spring consumer

Add additional configurations:
	application.properties
	Configuration class

Producer code:	
@Service
public class KafkaSender {
	
	@Autowired
	private KafkaTemplate<String, String> kafkaTemplate;
	
	String kafkaTopic = "test";
	
	public void send(String data) {
	    
	    kafkaTemplate.send(kafkaTopic, data);
	}
}


	Consumer Code:
private CountDownLatch latch = new CountDownLatch(1);

@KafkaListener(topics = "${test.topic}", groupId = "foo")
public void receive(ConsumerRecord<?, ?> consumerRecord) {
	LOGGER.info("received payload='{}'", consumerRecord.toString());
	latch.countDown();
}

Spring Kafka
https://medium.com/@prekshaan95/java-spring-boot-kafka-connection-setup-1f494df4eff4



Break from 11.40 AM to 11.55 AM!

Advanced TOpic Management






